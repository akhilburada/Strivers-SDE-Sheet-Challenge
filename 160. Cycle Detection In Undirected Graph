def helper(adjList, node, parent, vis):
    vis[node] = 1
    for v in adjList[node]:
        if(not vis[v]):
            if(helper(adjList, v, node, vis) == False):
                return 0
        elif(v != parent):
            return 0
    return 1


def cycleDetection(edges, n, m):
    adjList = [[] for i in range(n)]
    for u,v in edges:
        adjList[u-1].append(v-1)
        adjList[v-1].append(u-1)

    vis = [0 for i in range(n)]
    for i in range(n):
        if(not vis[i]):
            if(helper(adjList, i, -1, vis) == False):
                return 'Yes'
    return 'No'
    #return 'No' if(helper(adjList, 0, -1, vis)) else 'Yes'
