from os import *
from sys import *
from collections import *
from math import *

from sys import stdin, setrecursionlimit
from queue import Queue
setrecursionlimit(10**7)


# Binary tree node class for reference.
class BinaryTreeNode:
    def __init__(self, data):
        self.val = data
        self.left = None
        self.right = None

global mx
mx = 0
def helper(root):
    global mx
    if not root.left and not root.right: #that node is leaf
        return root.val
    ls, rs = 0, 0
    if root.left and root.right:
        ls = helper(root.left)
        rs = helper(root.right)
    elif(not root.left and root.right):
        rs = helper(root.right)
    elif(root.left and not root.right):
        ls = helper(root.left)
    mx = max(mx, (root.val+ls+rs))
    return root.val+max(ls, rs)


def findMaxSumPath(root):
    if not root or not root.left or not root.right:
        return -1
    global mx 
    mx = 0
    helper(root)
    return mx






# Taking level-order input using fast I/O method.
def takeInput():
    levelOrder = list(map(int, stdin.readline().strip().split(" ")))
    start = 0

    length = len(levelOrder)

    if length == 1:
        return None

    root = BinaryTreeNode(levelOrder[start])
    start += 1

    q = Queue()
    q.put(root)

    while not q.empty():
        currentNode = q.get()

        leftChild = levelOrder[start]
        start += 1

        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left = leftNode
            q.put(leftNode)

        rightChild = levelOrder[start]
        start += 1

        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right = rightNode
            q.put(rightNode)

    return root


# Main.
t = int(input())
for i in range(t):
    root = takeInput()
    maxSum = findMaxSumPath(root)
    print(maxSum)
