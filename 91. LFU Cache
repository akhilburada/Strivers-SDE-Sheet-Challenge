from os import *
from sys import *
from collections import *
from math import *


from collections import defaultdict, OrderedDict


class LFUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self._items = defaultdict(int) 
        self._freqs = defaultdict(OrderedDict)  

    def _update_freq(self, key: int, value: int = None) -> int:
        """
        Update the _items and the _freqs with the input key, then return
        the latest value.
        """
        f = self._items[key]
        v = self._freqs[f].pop(key)  # Remove the current key.
        if value is not None:  # Update with new value if any.
            v = value

        self._freqs[f + 1][key] = v  # Add the key to the new frequency.
        self._items[key] += 1  # Update the frequency in the items.
        if self._minFreq == f and not self._freqs[f]:  # Update minimum freq.
            self._minFreq += 1

        return v

    def get(self, key: int) -> int:
        if key not in self._items:  # Not found.
            return -1
        return self._update_freq(key)

    def put(self, key: int, value: int) -> None:
        if not self.capacity:  # Not able to put anything.
            return

        if key in self._items:
            self._update_freq(key, value)
        else:
            if len(self._items) == self.capacity: 
                self._items.pop(
                    self._freqs[self._minFreq].popitem(last=False)[0])

            # Add the new key.
            self._minFreq = 1
            self._items[key] = 1
            self._freqs[1][key] = value
'''
class LFUCache:

    def __init__(self, capacity: int):
        # Implement the constructor here
        pass

    def get(self, key: int) -> int:
        # Implement the get function here
        pass

    def put(self, key: int, value: int) -> None:
        # Implement the put function here
        pass
'''

